"""
Molecular Hamiltonian Builder - QuantumForge V5 分子哈密顿量构建器

接收分子模型参数，使用PySCF驱动器构建分子电子结构哈密顿量。
基于示例代码的分子系统和哈密顿量构建功能。
"""

from typing import Dict, Any

# 导入基类
try:
    from ..base_component import BaseComponent
except ImportError:
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
    from components.base_component import BaseComponent


class MolecularHamiltonianBuilder(BaseComponent):
    """
    分子哈密顿量构建器
    
    功能：基于分子参数生成电子结构哈密顿量构建代码
    使用PySCF驱动器和Qiskit Nature进行分子哈密顿量构建
    支持Jordan-Wigner和Bravyi-Kitaev量子比特映射
    """
    
    # LLM理解的组件描述
    description = "Build molecular electronic structure Hamiltonian using PySCF driver and Qiskit Nature. Supports predefined molecules (H2, LiH, H2O, BeH2) and custom molecular geometries. Handles qubit mapping (Jordan-Wigner, Bravyi-Kitaev) for quantum molecular simulations."
    
    def execute(self, query: str, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        执行分子哈密顿量构建代码生成
        
        Args:
            query: 用户原始查询
            params: 分子参数（来自MolecularModelGenerator）
            
        Returns:
            Dict containing:
                - code: 分子哈密顿量构建Python代码
                - notes: 代码说明
        """
        # 获取参数
        atom = params.get("atom", "H 0 0 0; H 0 0 0.735")
        basis = params.get("basis", "sto-3g")
        charge = params.get("charge", 0)
        spin = params.get("spin", 0)
        
        # 生成代码
        code = self._generate_molecular_hamiltonian_code(atom, basis, charge, spin)
        
        # 生成说明
        notes = f"Molecular Hamiltonian builder: {basis} basis, charge={charge}, spin={spin}"
        
        return {"code": code, "notes": notes}
    
    def _generate_molecular_hamiltonian_code(self, atom: str, basis: str, charge: int, spin: int) -> str:
        """生成分子哈密顿量构建代码"""
        
        code = f'''# Molecular Hamiltonian Builder - Generated by QuantumForge V5
from qiskit_nature.units import DistanceUnit
from qiskit_nature.second_q.drivers import PySCFDriver
from qiskit_nature.second_q.mappers import JordanWignerMapper, BravyiKitaevMapper
from qiskit_nature.second_q.transformers import ActiveSpaceTransformer

# Predefined molecules
MOLECULES = {{
    "H2": "H 0 0 0; H 0 0 0.735",
    "LiH": "Li 0 0 0; H 0 0 1.6", 
    "H2O": "O 0.0 0.0 0.0; H 0.757 0.586 0.0; H -0.757 0.586 0.0",
    "BeH2": "Be 0.0 0.0 0.0; H 0.0 0.0 1.3; H 0.0 0.0 -1.3"
}}

def create_molecular_problem(atom_string: str, basis: str = "sto-3g", charge: int = 0, spin: int = 0):
    """
    Create molecular problem using PySCF driver.
    
    Parameters:
    -----------
    atom_string : str
        Molecular geometry specification
    basis : str
        Basis set name (default: sto-3g)
    charge : int
        Total molecular charge (default: 0)
    spin : int
        Spin multiplicity (default: 0)
        
    Returns:
    --------
    ElectronicStructureProblem
        Molecular electronic structure problem
    """
    driver = PySCFDriver(
        atom=atom_string,
        basis=basis,
        charge=charge,
        spin=spin,
        unit=DistanceUnit.ANGSTROM,
    )
    
    problem = driver.run()
    return problem

def create_mapper(mapper_type: str = "jordan_wigner"):
    """
    Create qubit mapper for fermion-to-qubit transformation.
    
    Parameters:
    -----------
    mapper_type : str
        Type of mapper ("jordan_wigner" or "bravyi_kitaev")
        
    Returns:
    --------
    QubitMapper
        Qubit mapper instance
    """
    if mapper_type.lower() == "jordan_wigner":
        return JordanWignerMapper()
    elif mapper_type.lower() == "bravyi_kitaev":
        return BravyiKitaevMapper()
    else:
        return JordanWignerMapper()  # Default

def get_hamiltonian(problem, mapper):
    """
    Get qubit Hamiltonian from molecular problem.
    
    Parameters:
    -----------
    problem : ElectronicStructureProblem
        Molecular electronic structure problem
    mapper : QubitMapper
        Fermion-to-qubit mapper
        
    Returns:
    --------
    SparsePauliOp
        Qubit Hamiltonian as sparse Pauli operator
    """
    second_q_ops = problem.second_q_ops()
    hamiltonian = mapper.map(second_q_ops.get("ElectronicEnergy"))
    return hamiltonian

# Molecular parameters
atom = "{atom}"
basis = "{basis}"
charge = {charge}
spin = {spin}

# Create molecular problem
problem = create_molecular_problem(atom, basis, charge, spin)

# Create mapper (Jordan-Wigner by default)
mapper = create_mapper("jordan_wigner")

# Get qubit Hamiltonian
hamiltonian = get_hamiltonian(problem, mapper)

# Display information
print(f"Molecular system: {{atom}}")
print(f"Basis set: {{basis}}")
print(f"Charge: {{charge}}, Spin: {{spin}}")
print(f"Number of qubits: {{hamiltonian.num_qubits}}")
print(f"Number of Pauli terms: {{len(hamiltonian.paulis)}}")
'''
        
        return code


# 测试代码
if __name__ == "__main__":
    print("🧪 Testing MolecularHamiltonianBuilder...")
    
    try:
        builder = MolecularHamiltonianBuilder()
        
        print(f"📋 Component: {builder.get_component_name()}")
        print(f"📋 Description: {builder.get_description()}")
        
        # 测试用例 - 基于示例代码的分子系统
        test_cases = [
            {
                "name": "H2 molecule default",
                "query": "H2 molecule Hamiltonian",
                "params": {
                    "atom": "H 0 0 0; H 0 0 0.735",
                    "basis": "sto-3g",
                    "charge": 0,
                    "spin": 0
                }
            },
            {
                "name": "LiH molecule",
                "query": "LiH molecule electronic structure",
                "params": {
                    "atom": "Li 0 0 0; H 0 0 1.6",
                    "basis": "6-31g",
                    "charge": 0,
                    "spin": 0
                }
            },
            {
                "name": "H2O water molecule",
                "query": "Water molecule Hamiltonian",
                "params": {
                    "atom": "O 0.0 0.0 0.0; H 0.757 0.586 0.0; H -0.757 0.586 0.0",
                    "basis": "sto-3g",
                    "charge": 0,
                    "spin": 0
                }
            },
            {
                "name": "BeH2 molecule",
                "query": "BeH2 molecule construction",
                "params": {
                    "atom": "Be 0.0 0.0 0.0; H 0.0 0.0 1.3; H 0.0 0.0 -1.3",
                    "basis": "sto-3g",
                    "charge": 0,
                    "spin": 0
                }
            },
            {
                "name": "Charged H2+ ion",
                "query": "H2+ ion Hamiltonian",
                "params": {
                    "atom": "H 0 0 0; H 0 0 0.735",
                    "basis": "sto-3g",
                    "charge": 1,
                    "spin": 1
                }
            }
        ]
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n🧪 Test Case {i}: {test_case['name']}")
            print(f"  Query: \"{test_case['query']}\"")
            print(f"  Input params: {test_case['params']}")
            
            result = builder.execute(test_case['query'], test_case['params'])
            
            print(f"  ✅ Notes: {result['notes']}")
            print(f"  📝 Code length: {len(result['code'])} chars")
            
            # 验证生成的代码是否包含关键组件
            code = result['code']
            assert "create_molecular_problem" in code
            assert "create_mapper" in code
            assert "get_hamiltonian" in code
            assert "PySCFDriver" in code
            assert "MOLECULES" in code
        
        print(f"\n✅ All MolecularHamiltonianBuilder tests passed!")
        print(f"🎯 Component demonstrates molecular Hamiltonian features:")
        print(f"  • PySCF driver integration for electronic structure calculations")
        print(f"  • Predefined molecules (H2, LiH, H2O, BeH2) for quick setup")
        print(f"  • Flexible molecular geometry specification")
        print(f"  • Jordan-Wigner and Bravyi-Kitaev mapper support")
        print(f"  • Charge and spin state handling")
        print(f"  • Integration with Qiskit Nature molecular simulation")
        print(f"  • Compatible with QuantumForge V5 LLM-driven architecture")
        
    except Exception as e:
        print(f"⚠️ MolecularHamiltonianBuilder test error: {e}")
        import traceback
        traceback.print_exc()