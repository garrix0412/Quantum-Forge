"""
Heisenberg Hamiltonian Builder - QuantumForge V5

接收Heisenberg参数，生成Qiskit SparsePauliOp哈密顿量代码。只返回code+notes。
"""

from typing import Dict, Any, List, Tuple

# 导入基类
try:
    from ..base_component import BaseComponent
except ImportError:
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
    from components.base_component import BaseComponent


class HeisenbergHamiltonianBuilder(BaseComponent):
    """Heisenberg哈密顿量构建器 - 只生成代码"""
    
    description = "Build Heisenberg Hamiltonian Qiskit code from Heisenberg parameters. H = J∑(XX + YY + ZZ) + h∑Z. Supports open/periodic boundary conditions."
    
    def execute(self, query: str, params: Dict[str, Any]) -> Dict[str, Any]:
        """生成Heisenberg哈密顿量代码"""
        # 参数获取
        num_qubits = int(params.get("num_qubits", 4))
        J = float(params.get("J", 1.0))
        h = float(params.get("h", 0.0))
        topology = params.get("topology", "linear")
        boundary = params.get("boundary_conditions", "open")
        
        # 生成代码 
        code = f'''# Heisenberg Hamiltonian Builder - Generated by QuantumForge V5
from qiskit.quantum_info import SparsePauliOp

def build_heisenberg_hamiltonian(num_qubits: int, J: float, h: float = 0.0, boundary: str = "open"):
    """
    Build Heisenberg Hamiltonian efficiently for any system size.
    H = J*∑(XX + YY + ZZ) + h*∑Z
    """
    pauli_list = []
    
    # Exchange interaction terms
    coupling_terms = num_qubits - 1 if boundary == "open" else num_qubits
    
    for i in range(coupling_terms):
        j = (i + 1) % num_qubits
        
        # XX interaction: J * X_i * X_j
        pauli_string = ['I'] * num_qubits
        pauli_string[i] = 'X'
        pauli_string[j] = 'X'
        pauli_list.append((''.join(pauli_string), J))
        
        # YY interaction: J * Y_i * Y_j
        pauli_string = ['I'] * num_qubits
        pauli_string[i] = 'Y'
        pauli_string[j] = 'Y'
        pauli_list.append((''.join(pauli_string), J))
        
        # ZZ interaction: J * Z_i * Z_j
        pauli_string = ['I'] * num_qubits
        pauli_string[i] = 'Z'
        pauli_string[j] = 'Z'
        pauli_list.append((''.join(pauli_string), J))
    
    # Magnetic field terms: h * Z_i
    if abs(h) > 1e-12:
        for i in range(num_qubits):
            pauli_string = ['I'] * num_qubits
            pauli_string[i] = 'Z'
            pauli_list.append((''.join(pauli_string), h))
    
    return SparsePauliOp.from_list(list)

# Heisenberg Parameters
num_qubits = {num_qubits}
J = {J}
h = {h}
boundary = "{boundary}"

# Build Hamiltonian
hamiltonian = build_heisenberg_hamiltonian(num_qubits, J, h, boundary)
print(f"Heisenberg Hamiltonian: {{num_qubits}} qubits, {{boundary}} boundary")'''

        # 简要描述
        notes = f"Heisenberg Hamiltonian: {num_qubits} qubits, {boundary} boundary"
        
        return {"code": code, "notes": notes}


