"""
Heisenberg Hamiltonian Builder - QuantumForge V5

接收各向同性Heisenberg模型参数，生成Qiskit SparsePauliOp哈密顿量代码。
H = J∑(XᵢXⱼ + YᵢYⱼ + ZᵢZⱼ) + h∑Zᵢ
"""

from typing import Dict, Any, List, Tuple

# 导入基类
try:
    from ..base_component import BaseComponent
except ImportError:
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
    from components.base_component import BaseComponent


class HeisenbergHamiltonianBuilder(BaseComponent):
    """
    各向同性Heisenberg哈密顿量构建器
    
    H = J∑(XᵢXⱼ + YᵢYⱼ + ZᵢZⱼ) + h∑Zᵢ
    
    参数：
    - J: 各向同性交换耦合强度
    - h: 纵向磁场强度
    """
    
    description = "Build isotropic Heisenberg Hamiltonian Qiskit code. H = J∑(XX + YY + ZZ) + h∑Z. Supports open/periodic boundary conditions for quantum spin chains."
    
    def execute(self, query: str, params: Dict[str, Any]) -> Dict[str, Any]:
        """生成各向同性Heisenberg哈密顿量代码"""
        # 简化参数获取
        num_qubits = int(params.get("num_qubits", 4))
        J = float(params.get("J", 1.0))  # 各向同性耦合强度
        h = float(params.get("h", 0.0))  # 纵向磁场强度
        boundary = params.get("boundary_conditions", "open")
        
        # 构建哈密顿量代码
        code = self._generate_isotropic_heisenberg_code(num_qubits, J, h, boundary)
        
        # 简要描述
        notes = f"Isotropic Heisenberg Hamiltonian: {num_qubits} qubits, J={J}, h={h}, {boundary} boundary"
        
        return {"code": code, "notes": notes}
    
    def _generate_isotropic_heisenberg_code(self, num_qubits: int, J: float, h: float, boundary: str) -> str:
        """生成各向同性Heisenberg哈密顿量构建代码"""
        
        code = f'''# Isotropic Heisenberg Hamiltonian Builder - Generated by QuantumForge V5
from qiskit.quantum_info import SparsePauliOp

def build_heisenberg_hamiltonian(num_qubits: int, J: float, h: float = 0.0, boundary: str = "open"):
    """
    Build isotropic Heisenberg Hamiltonian for quantum spin chain.
    
    H = J*∑(XᵢXⱼ + YᵢYⱼ + ZᵢZⱼ) + h*∑Zᵢ
    
    Parameters:
    -----------
    num_qubits : int
        Number of qubits in the spin chain
    J : float
        Isotropic exchange coupling strength (Jx = Jy = Jz = J)
    h : float
        Longitudinal magnetic field strength (Z direction)
    boundary : str
        Boundary conditions ("open" or "periodic")
        
    Returns:
    --------
    SparsePauliOp
        Isotropic Heisenberg Hamiltonian as sparse Pauli operator
    """
    pauli_list = []
    
    # Exchange interaction terms (isotropic: J for all three directions)
    coupling_terms = num_qubits - 1 if boundary == "open" else num_qubits
    
    for i in range(coupling_terms):
        j = (i + 1) % num_qubits
        
        # XX interaction: J * XᵢXⱼ
        pauli_string = ['I'] * num_qubits
        pauli_string[i] = 'X'
        pauli_string[j] = 'X'
        pauli_list.append((''.join(pauli_string), J))
        
        # YY interaction: J * YᵢYⱼ
        pauli_string = ['I'] * num_qubits
        pauli_string[i] = 'Y'
        pauli_string[j] = 'Y'
        pauli_list.append((''.join(pauli_string), J))
        
        # ZZ interaction: J * ZᵢZⱼ
        pauli_string = ['I'] * num_qubits
        pauli_string[i] = 'Z'
        pauli_string[j] = 'Z'
        pauli_list.append((''.join(pauli_string), J))
    
    # Longitudinal magnetic field terms: h * Zᵢ
    if abs(h) > 1e-12:
        for i in range(num_qubits):
            pauli_string = ['I'] * num_qubits
            pauli_string[i] = 'Z'
            pauli_list.append((''.join(pauli_string), h))
    
    return SparsePauliOp.from_list(pauli_list)

# Isotropic Heisenberg Model Parameters
num_qubits = {num_qubits}
J = {J}  # Isotropic exchange coupling (Jx = Jy = Jz = J)
h = {h}  # Longitudinal magnetic field
boundary = "{boundary}"

# Build Hamiltonian
hamiltonian = build_heisenberg_hamiltonian(num_qubits, J, h, boundary)

# Display information
print(f"Isotropic Heisenberg Hamiltonian: {{num_qubits}} qubits")
print(f"Exchange coupling: J={{J}} (isotropic)")
print(f"Magnetic field: h={{h}} (longitudinal)")
print(f"Boundary conditions: {{boundary}}")
print(f"Total Pauli terms: {{len(hamiltonian.paulis)}}")
'''
        
        return code
    

# 测试代码
if __name__ == "__main__":
    print("🧪 Testing Simplified HeisenbergHamiltonianBuilder...")
    
    try:
        builder = HeisenbergHamiltonianBuilder()
        
        print(f"📋 Component: {builder.get_component_name()}")
        print(f"📋 Description: {builder.get_description()}")
        
        # 简化的测试用例 - 只测试各向同性模型
        test_cases = [
            {
                "name": "Basic isotropic Heisenberg",
                "params": {
                    "num_qubits": 4, 
                    "J": 1.0,
                    "h": 0.0,
                    "boundary_conditions": "open"
                }
            },
            {
                "name": "Ferromagnetic with field",
                "params": {
                    "num_qubits": 6,
                    "J": 1.5,
                    "h": 0.5,
                    "boundary_conditions": "open"
                }
            },
            {
                "name": "Antiferromagnetic ring",
                "params": {
                    "num_qubits": 6,
                    "J": -1.0,
                    "h": 0.0,
                    "boundary_conditions": "periodic"
                }
            },
            {
                "name": "Benchmark-style parameters",
                "params": {
                    "num_qubits": 4,
                    "J": 2.0,
                    "h": 0.8,
                    "boundary_conditions": "open"
                }
            }
        ]
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n🧪 Test Case {i}: {test_case['name']}")
            print(f"  Parameters: {test_case['params']}")
            
            result = builder.execute("test query", test_case['params'])
            print(f"  ✅ Notes: {result['notes']}")
            print(f"  📝 Code length: {len(result['code'])} chars")
            
            # 验证生成的代码是否包含关键组件
            code = result['code']
            assert "build_heisenberg_hamiltonian" in code
            assert "SparsePauliOp" in code
            assert "Isotropic" in code
        
        print(f"\n✅ All simplified HeisenbergHamiltonianBuilder tests passed!")
        print(f"🎯 Simplified component features:")
        print(f"  • Focus on isotropic Heisenberg model only (Jx=Jy=Jz=J)")
        print(f"  • Simplified parameter interface (J, h, boundary)")
        print(f"  • Longitudinal magnetic field support (Z direction)")
        print(f"  • Open and periodic boundary conditions")
        print(f"  • Clean and maintainable code generation")
        print(f"  • Reduced complexity while maintaining full functionality")
        
    except Exception as e:
        print(f"⚠️ HeisenbergHamiltonianBuilder test error: {e}")
        import traceback
        traceback.print_exc()